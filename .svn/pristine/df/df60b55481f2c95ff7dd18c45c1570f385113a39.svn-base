package com.asia.paint;

import android.util.SparseArray;
import android.util.SparseIntArray;
import android.view.View;
import androidx.databinding.DataBinderMapper;
import androidx.databinding.DataBindingComponent;
import androidx.databinding.ViewDataBinding;
import com.asia.paint.databinding.ActivityAboutUsBindingImpl;
import com.asia.paint.databinding.ActivityAccountIndexBindingImpl;
import com.asia.paint.databinding.ActivityAddCommentBindingImpl;
import com.asia.paint.databinding.ActivityAddressBindingImpl;
import com.asia.paint.databinding.ActivityAfterSaleBindingImpl;
import com.asia.paint.databinding.ActivityAfterSaleDetailBindingImpl;
import com.asia.paint.databinding.ActivityApplyAfterSaleBindingImpl;
import com.asia.paint.databinding.ActivityApplyResellBindingImpl;
import com.asia.paint.databinding.ActivityAuthRealNameBindingImpl;
import com.asia.paint.databinding.ActivityBaseTitleBindingImpl;
import com.asia.paint.databinding.ActivityBindCashAccountBindingImpl;
import com.asia.paint.databinding.ActivityBindPhoneBindingImpl;
import com.asia.paint.databinding.ActivityCashBindingImpl;
import com.asia.paint.databinding.ActivityCashRecordDetailBindingImpl;
import com.asia.paint.databinding.ActivityCommentBindingImpl;
import com.asia.paint.databinding.ActivityCouponBindingImpl;
import com.asia.paint.databinding.ActivityCouponCenterBindingImpl;
import com.asia.paint.databinding.ActivityCustomerHistoryServiceBindingImpl;
import com.asia.paint.databinding.ActivityCustomerServiceBindingImpl;
import com.asia.paint.databinding.ActivityDecorationDetailBindingImpl;
import com.asia.paint.databinding.ActivityDistributionTasksBindingImpl;
import com.asia.paint.databinding.ActivityEditAddressBindingImpl;
import com.asia.paint.databinding.ActivityEditUserBindingImpl;
import com.asia.paint.databinding.ActivityFavoritesBindingImpl;
import com.asia.paint.databinding.ActivityFeedbackBindingImpl;
import com.asia.paint.databinding.ActivityForgetPasswordBindingImpl;
import com.asia.paint.databinding.ActivityGetPayPwdCodeBindingImpl;
import com.asia.paint.databinding.ActivityGoodsDetailBindingImpl;
import com.asia.paint.databinding.ActivityGroupAndFlashBindingImpl;
import com.asia.paint.databinding.ActivityGroupDetailBindingImpl;
import com.asia.paint.databinding.ActivityHoldMeetingBindingImpl;
import com.asia.paint.databinding.ActivityLoginBindingImpl;
import com.asia.paint.databinding.ActivityMainBindingImpl;
import com.asia.paint.databinding.ActivityMeetingBindingImpl;
import com.asia.paint.databinding.ActivityMeetingDetailBindingImpl;
import com.asia.paint.databinding.ActivityMeetingMemberBindingImpl;
import com.asia.paint.databinding.ActivityMessageBindingImpl;
import com.asia.paint.databinding.ActivityMoneyBindingImpl;
import com.asia.paint.databinding.ActivityMoneyDetailBindingImpl;
import com.asia.paint.databinding.ActivityMonthlyBindingImpl;
import com.asia.paint.databinding.ActivityMonthlyDetailBindingImpl;
import com.asia.paint.databinding.ActivityMyPintuanBindingImpl;
import com.asia.paint.databinding.ActivityNewPasswordBindingImpl;
import com.asia.paint.databinding.ActivityOrderCheckoutBindingImpl;
import com.asia.paint.databinding.ActivityOrderDetailBindingImpl;
import com.asia.paint.databinding.ActivityOrderMineBindingImpl;
import com.asia.paint.databinding.ActivityPhotoBindingImpl;
import com.asia.paint.databinding.ActivityPlayVideoBindingImpl;
import com.asia.paint.databinding.ActivityPostDetailBindingImpl;
import com.asia.paint.databinding.ActivityPublishPostBindingImpl;
import com.asia.paint.databinding.ActivityReceiptBindingImpl;
import com.asia.paint.databinding.ActivityRechargeBindingImpl;
import com.asia.paint.databinding.ActivityRecommendCodeBindingImpl;
import com.asia.paint.databinding.ActivityResetPasswordBindingImpl;
import com.asia.paint.databinding.ActivityScoreBindingImpl;
import com.asia.paint.databinding.ActivityScoreDetailBindingImpl;
import com.asia.paint.databinding.ActivityScoreRecordBindingImpl;
import com.asia.paint.databinding.ActivitySelectAfterSaleTypeBindingImpl;
import com.asia.paint.databinding.ActivitySellerGoalsBindingImpl;
import com.asia.paint.databinding.ActivitySetPwdBindingImpl;
import com.asia.paint.databinding.ActivitySettingsBindingImpl;
import com.asia.paint.databinding.ActivityStaffBindingImpl;
import com.asia.paint.databinding.ActivityStaffDetailBindingImpl;
import com.asia.paint.databinding.ActivityTaskCenterBindingImpl;
import com.asia.paint.databinding.ActivityTestBindingImpl;
import com.asia.paint.databinding.ActivityTrainBindingImpl;
import com.asia.paint.databinding.ActivityTrainDetailBindingImpl;
import com.asia.paint.databinding.ActivityUnsubscribeAccountBindingImpl;
import com.asia.paint.databinding.ActivityWebViewBindingImpl;
import com.asia.paint.databinding.DialogAddDelveryBindingImpl;
import com.asia.paint.databinding.DialogAfterSaleReasonBindingImpl;
import com.asia.paint.databinding.DialogCashPayBindingImpl;
import com.asia.paint.databinding.DialogCashTypeBindingImpl;
import com.asia.paint.databinding.DialogClipBoardBindingImpl;
import com.asia.paint.databinding.DialogDeliverBindingImpl;
import com.asia.paint.databinding.DialogGoodsSpecBindingImpl;
import com.asia.paint.databinding.DialogHoldMeetingBindingImpl;
import com.asia.paint.databinding.DialogJoinMeetingBindingImpl;
import com.asia.paint.databinding.DialogMessageBindingImpl;
import com.asia.paint.databinding.DialogOrderCouponBindingImpl;
import com.asia.paint.databinding.DialogOrderReceiptBindingImpl;
import com.asia.paint.databinding.DialogOrderSelectPayTypeBindingImpl;
import com.asia.paint.databinding.DialogPayBindingImpl;
import com.asia.paint.databinding.DialogPintuanBindingImpl;
import com.asia.paint.databinding.DialogReceiptTypeBindingImpl;
import com.asia.paint.databinding.DialogReceiptUploadBindingImpl;
import com.asia.paint.databinding.DialogServiceScheduleBindingImpl;
import com.asia.paint.databinding.DialogStoreCodeBindingImpl;
import com.asia.paint.databinding.DialogSureMeetingBindingImpl;
import com.asia.paint.databinding.FragmentBaseBindingImpl;
import com.asia.paint.databinding.FragmentCartBindingImpl;
import com.asia.paint.databinding.FragmentCouponBindingImpl;
import com.asia.paint.databinding.FragmentDecorationBindingImpl;
import com.asia.paint.databinding.FragmentFindBindingImpl;
import com.asia.paint.databinding.FragmentGoodsBindingImpl;
import com.asia.paint.databinding.FragmentGoodsShowBindingImpl;
import com.asia.paint.databinding.FragmentMeetingBindingImpl;
import com.asia.paint.databinding.FragmentMineBindingImpl;
import com.asia.paint.databinding.FragmentMineServiceBindingImpl;
import com.asia.paint.databinding.FragmentOrderBindingImpl;
import com.asia.paint.databinding.FragmentPintuanBindingImpl;
import com.asia.paint.databinding.FragmentPostBindingImpl;
import com.asia.paint.databinding.FragmentScheduleBindingImpl;
import com.asia.paint.databinding.FragmentServiceBindingImpl;
import com.asia.paint.databinding.FragmentShopBindingImpl;
import com.asia.paint.databinding.FragmentStaffBindingImpl;
import com.asia.paint.databinding.FragmentTaskCenterBindingImpl;
import com.asia.paint.databinding.FragmentTrainBindingImpl;
import com.asia.paint.databinding.FragmentZoneBindingImpl;
import com.asia.paint.databinding.TestTesBindingImpl;
import com.asia.paint.databinding.ViewBottomCartBindingImpl;
import com.asia.paint.databinding.ViewCheckBoxBindingImpl;
import com.asia.paint.databinding.ViewClearEditextBindingImpl;
import com.asia.paint.databinding.ViewCommentLayoutBindingImpl;
import com.asia.paint.databinding.ViewFoldPanelBindingImpl;
import com.asia.paint.databinding.ViewGoodsShowBindingImpl;
import com.asia.paint.databinding.ViewGoodsShowPanelBindingImpl;
import com.asia.paint.databinding.ViewHostTabBindingImpl;
import com.asia.paint.databinding.ViewItemLayoutBindingImpl;
import com.asia.paint.databinding.ViewMagicImageBindingImpl;
import com.asia.paint.databinding.ViewMineOptionsBindingImpl;
import com.asia.paint.databinding.ViewMineOrderBindingImpl;
import com.asia.paint.databinding.ViewOptionBindingImpl;
import com.asia.paint.databinding.ViewPasswordEditextBindingImpl;
import com.asia.paint.databinding.ViewPostHeaderBindingImpl;
import com.asia.paint.databinding.ViewSearchBindingImpl;
import com.asia.paint.databinding.ViewSelectImageBindingImpl;
import com.asia.paint.databinding.ViewSellerOptionsBindingImpl;
import com.asia.paint.databinding.ViewSellerResultBindingImpl;
import com.asia.paint.databinding.ViewSettingsItemBindingImpl;
import com.asia.paint.databinding.ViewTabHostBindingImpl;
import com.asia.paint.databinding.ViewTaskPanelBindingImpl;
import java.lang.IllegalArgumentException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class DataBinderMapperImpl extends DataBinderMapper {
  private static final int LAYOUT_ACTIVITYABOUTUS = 1;

  private static final int LAYOUT_ACTIVITYACCOUNTINDEX = 2;

  private static final int LAYOUT_ACTIVITYADDCOMMENT = 3;

  private static final int LAYOUT_ACTIVITYADDRESS = 4;

  private static final int LAYOUT_ACTIVITYAFTERSALE = 5;

  private static final int LAYOUT_ACTIVITYAFTERSALEDETAIL = 6;

  private static final int LAYOUT_ACTIVITYAPPLYAFTERSALE = 7;

  private static final int LAYOUT_ACTIVITYAPPLYRESELL = 8;

  private static final int LAYOUT_ACTIVITYAUTHREALNAME = 9;

  private static final int LAYOUT_ACTIVITYBASETITLE = 10;

  private static final int LAYOUT_ACTIVITYBINDCASHACCOUNT = 11;

  private static final int LAYOUT_ACTIVITYBINDPHONE = 12;

  private static final int LAYOUT_ACTIVITYCASH = 13;

  private static final int LAYOUT_ACTIVITYCASHRECORDDETAIL = 14;

  private static final int LAYOUT_ACTIVITYCOMMENT = 15;

  private static final int LAYOUT_ACTIVITYCOUPON = 16;

  private static final int LAYOUT_ACTIVITYCOUPONCENTER = 17;

  private static final int LAYOUT_ACTIVITYCUSTOMERHISTORYSERVICE = 18;

  private static final int LAYOUT_ACTIVITYCUSTOMERSERVICE = 19;

  private static final int LAYOUT_ACTIVITYDECORATIONDETAIL = 20;

  private static final int LAYOUT_ACTIVITYDISTRIBUTIONTASKS = 21;

  private static final int LAYOUT_ACTIVITYEDITADDRESS = 22;

  private static final int LAYOUT_ACTIVITYEDITUSER = 23;

  private static final int LAYOUT_ACTIVITYFAVORITES = 24;

  private static final int LAYOUT_ACTIVITYFEEDBACK = 25;

  private static final int LAYOUT_ACTIVITYFORGETPASSWORD = 26;

  private static final int LAYOUT_ACTIVITYGETPAYPWDCODE = 27;

  private static final int LAYOUT_ACTIVITYGOODSDETAIL = 28;

  private static final int LAYOUT_ACTIVITYGROUPANDFLASH = 29;

  private static final int LAYOUT_ACTIVITYGROUPDETAIL = 30;

  private static final int LAYOUT_ACTIVITYHOLDMEETING = 31;

  private static final int LAYOUT_ACTIVITYLOGIN = 32;

  private static final int LAYOUT_ACTIVITYMAIN = 33;

  private static final int LAYOUT_ACTIVITYMEETING = 34;

  private static final int LAYOUT_ACTIVITYMEETINGDETAIL = 35;

  private static final int LAYOUT_ACTIVITYMEETINGMEMBER = 36;

  private static final int LAYOUT_ACTIVITYMESSAGE = 37;

  private static final int LAYOUT_ACTIVITYMONEY = 38;

  private static final int LAYOUT_ACTIVITYMONEYDETAIL = 39;

  private static final int LAYOUT_ACTIVITYMONTHLY = 40;

  private static final int LAYOUT_ACTIVITYMONTHLYDETAIL = 41;

  private static final int LAYOUT_ACTIVITYMYPINTUAN = 42;

  private static final int LAYOUT_ACTIVITYNEWPASSWORD = 43;

  private static final int LAYOUT_ACTIVITYORDERCHECKOUT = 44;

  private static final int LAYOUT_ACTIVITYORDERDETAIL = 45;

  private static final int LAYOUT_ACTIVITYORDERMINE = 46;

  private static final int LAYOUT_ACTIVITYPHOTO = 47;

  private static final int LAYOUT_ACTIVITYPLAYVIDEO = 48;

  private static final int LAYOUT_ACTIVITYPOSTDETAIL = 49;

  private static final int LAYOUT_ACTIVITYPUBLISHPOST = 50;

  private static final int LAYOUT_ACTIVITYRECEIPT = 51;

  private static final int LAYOUT_ACTIVITYRECHARGE = 52;

  private static final int LAYOUT_ACTIVITYRECOMMENDCODE = 53;

  private static final int LAYOUT_ACTIVITYRESETPASSWORD = 54;

  private static final int LAYOUT_ACTIVITYSCORE = 55;

  private static final int LAYOUT_ACTIVITYSCOREDETAIL = 56;

  private static final int LAYOUT_ACTIVITYSCORERECORD = 57;

  private static final int LAYOUT_ACTIVITYSELECTAFTERSALETYPE = 58;

  private static final int LAYOUT_ACTIVITYSELLERGOALS = 59;

  private static final int LAYOUT_ACTIVITYSETPWD = 60;

  private static final int LAYOUT_ACTIVITYSETTINGS = 61;

  private static final int LAYOUT_ACTIVITYSTAFF = 62;

  private static final int LAYOUT_ACTIVITYSTAFFDETAIL = 63;

  private static final int LAYOUT_ACTIVITYTASKCENTER = 64;

  private static final int LAYOUT_ACTIVITYTEST = 65;

  private static final int LAYOUT_ACTIVITYTRAIN = 66;

  private static final int LAYOUT_ACTIVITYTRAINDETAIL = 67;

  private static final int LAYOUT_ACTIVITYUNSUBSCRIBEACCOUNT = 68;

  private static final int LAYOUT_ACTIVITYWEBVIEW = 69;

  private static final int LAYOUT_DIALOGADDDELVERY = 70;

  private static final int LAYOUT_DIALOGAFTERSALEREASON = 71;

  private static final int LAYOUT_DIALOGCASHPAY = 72;

  private static final int LAYOUT_DIALOGCASHTYPE = 73;

  private static final int LAYOUT_DIALOGCLIPBOARD = 74;

  private static final int LAYOUT_DIALOGDELIVER = 75;

  private static final int LAYOUT_DIALOGGOODSSPEC = 76;

  private static final int LAYOUT_DIALOGHOLDMEETING = 77;

  private static final int LAYOUT_DIALOGJOINMEETING = 78;

  private static final int LAYOUT_DIALOGMESSAGE = 79;

  private static final int LAYOUT_DIALOGORDERCOUPON = 80;

  private static final int LAYOUT_DIALOGORDERRECEIPT = 81;

  private static final int LAYOUT_DIALOGORDERSELECTPAYTYPE = 82;

  private static final int LAYOUT_DIALOGPAY = 83;

  private static final int LAYOUT_DIALOGPINTUAN = 84;

  private static final int LAYOUT_DIALOGRECEIPTTYPE = 85;

  private static final int LAYOUT_DIALOGRECEIPTUPLOAD = 86;

  private static final int LAYOUT_DIALOGSERVICESCHEDULE = 87;

  private static final int LAYOUT_DIALOGSTORECODE = 88;

  private static final int LAYOUT_DIALOGSUREMEETING = 89;

  private static final int LAYOUT_FRAGMENTBASE = 90;

  private static final int LAYOUT_FRAGMENTCART = 91;

  private static final int LAYOUT_FRAGMENTCOUPON = 92;

  private static final int LAYOUT_FRAGMENTDECORATION = 93;

  private static final int LAYOUT_FRAGMENTFIND = 94;

  private static final int LAYOUT_FRAGMENTGOODS = 95;

  private static final int LAYOUT_FRAGMENTGOODSSHOW = 96;

  private static final int LAYOUT_FRAGMENTMEETING = 97;

  private static final int LAYOUT_FRAGMENTMINE = 98;

  private static final int LAYOUT_FRAGMENTMINESERVICE = 99;

  private static final int LAYOUT_FRAGMENTORDER = 100;

  private static final int LAYOUT_FRAGMENTPINTUAN = 101;

  private static final int LAYOUT_FRAGMENTPOST = 102;

  private static final int LAYOUT_FRAGMENTSCHEDULE = 103;

  private static final int LAYOUT_FRAGMENTSERVICE = 104;

  private static final int LAYOUT_FRAGMENTSHOP = 105;

  private static final int LAYOUT_FRAGMENTSTAFF = 106;

  private static final int LAYOUT_FRAGMENTTASKCENTER = 107;

  private static final int LAYOUT_FRAGMENTTRAIN = 108;

  private static final int LAYOUT_FRAGMENTZONE = 109;

  private static final int LAYOUT_TESTTES = 110;

  private static final int LAYOUT_VIEWBOTTOMCART = 111;

  private static final int LAYOUT_VIEWCHECKBOX = 112;

  private static final int LAYOUT_VIEWCLEAREDITEXT = 113;

  private static final int LAYOUT_VIEWCOMMENTLAYOUT = 114;

  private static final int LAYOUT_VIEWFOLDPANEL = 115;

  private static final int LAYOUT_VIEWGOODSSHOW = 116;

  private static final int LAYOUT_VIEWGOODSSHOWPANEL = 117;

  private static final int LAYOUT_VIEWHOSTTAB = 118;

  private static final int LAYOUT_VIEWITEMLAYOUT = 119;

  private static final int LAYOUT_VIEWMAGICIMAGE = 120;

  private static final int LAYOUT_VIEWMINEOPTIONS = 121;

  private static final int LAYOUT_VIEWMINEORDER = 122;

  private static final int LAYOUT_VIEWOPTION = 123;

  private static final int LAYOUT_VIEWPASSWORDEDITEXT = 124;

  private static final int LAYOUT_VIEWPOSTHEADER = 125;

  private static final int LAYOUT_VIEWSEARCH = 126;

  private static final int LAYOUT_VIEWSELECTIMAGE = 127;

  private static final int LAYOUT_VIEWSELLEROPTIONS = 128;

  private static final int LAYOUT_VIEWSELLERRESULT = 129;

  private static final int LAYOUT_VIEWSETTINGSITEM = 130;

  private static final int LAYOUT_VIEWTABHOST = 131;

  private static final int LAYOUT_VIEWTASKPANEL = 132;

  private static final SparseIntArray INTERNAL_LAYOUT_ID_LOOKUP = new SparseIntArray(132);

  static {
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_about_us, LAYOUT_ACTIVITYABOUTUS);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_account_index, LAYOUT_ACTIVITYACCOUNTINDEX);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_add_comment, LAYOUT_ACTIVITYADDCOMMENT);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_address, LAYOUT_ACTIVITYADDRESS);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_after_sale, LAYOUT_ACTIVITYAFTERSALE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_after_sale_detail, LAYOUT_ACTIVITYAFTERSALEDETAIL);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_apply_after_sale, LAYOUT_ACTIVITYAPPLYAFTERSALE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_apply_resell, LAYOUT_ACTIVITYAPPLYRESELL);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_auth_real_name, LAYOUT_ACTIVITYAUTHREALNAME);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_base_title, LAYOUT_ACTIVITYBASETITLE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_bind_cash_account, LAYOUT_ACTIVITYBINDCASHACCOUNT);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_bind_phone, LAYOUT_ACTIVITYBINDPHONE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_cash, LAYOUT_ACTIVITYCASH);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_cash_record_detail, LAYOUT_ACTIVITYCASHRECORDDETAIL);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_comment, LAYOUT_ACTIVITYCOMMENT);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_coupon, LAYOUT_ACTIVITYCOUPON);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_coupon_center, LAYOUT_ACTIVITYCOUPONCENTER);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_customer_history_service, LAYOUT_ACTIVITYCUSTOMERHISTORYSERVICE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_customer_service, LAYOUT_ACTIVITYCUSTOMERSERVICE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_decoration_detail, LAYOUT_ACTIVITYDECORATIONDETAIL);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_distribution_tasks, LAYOUT_ACTIVITYDISTRIBUTIONTASKS);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_edit_address, LAYOUT_ACTIVITYEDITADDRESS);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_edit_user, LAYOUT_ACTIVITYEDITUSER);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_favorites, LAYOUT_ACTIVITYFAVORITES);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_feedback, LAYOUT_ACTIVITYFEEDBACK);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_forget_password, LAYOUT_ACTIVITYFORGETPASSWORD);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_get_pay_pwd_code, LAYOUT_ACTIVITYGETPAYPWDCODE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_goods_detail, LAYOUT_ACTIVITYGOODSDETAIL);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_group_and_flash, LAYOUT_ACTIVITYGROUPANDFLASH);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_group_detail, LAYOUT_ACTIVITYGROUPDETAIL);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_hold_meeting, LAYOUT_ACTIVITYHOLDMEETING);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_login, LAYOUT_ACTIVITYLOGIN);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_main, LAYOUT_ACTIVITYMAIN);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_meeting, LAYOUT_ACTIVITYMEETING);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_meeting_detail, LAYOUT_ACTIVITYMEETINGDETAIL);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_meeting_member, LAYOUT_ACTIVITYMEETINGMEMBER);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_message, LAYOUT_ACTIVITYMESSAGE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_money, LAYOUT_ACTIVITYMONEY);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_money_detail, LAYOUT_ACTIVITYMONEYDETAIL);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_monthly, LAYOUT_ACTIVITYMONTHLY);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_monthly_detail, LAYOUT_ACTIVITYMONTHLYDETAIL);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_my_pintuan, LAYOUT_ACTIVITYMYPINTUAN);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_new_password, LAYOUT_ACTIVITYNEWPASSWORD);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_order_checkout, LAYOUT_ACTIVITYORDERCHECKOUT);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_order_detail, LAYOUT_ACTIVITYORDERDETAIL);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_order_mine, LAYOUT_ACTIVITYORDERMINE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_photo, LAYOUT_ACTIVITYPHOTO);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_play_video, LAYOUT_ACTIVITYPLAYVIDEO);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_post_detail, LAYOUT_ACTIVITYPOSTDETAIL);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_publish_post, LAYOUT_ACTIVITYPUBLISHPOST);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_receipt, LAYOUT_ACTIVITYRECEIPT);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_recharge, LAYOUT_ACTIVITYRECHARGE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_recommend_code, LAYOUT_ACTIVITYRECOMMENDCODE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_reset_password, LAYOUT_ACTIVITYRESETPASSWORD);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_score, LAYOUT_ACTIVITYSCORE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_score_detail, LAYOUT_ACTIVITYSCOREDETAIL);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_score_record, LAYOUT_ACTIVITYSCORERECORD);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_select_after_sale_type, LAYOUT_ACTIVITYSELECTAFTERSALETYPE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_seller_goals, LAYOUT_ACTIVITYSELLERGOALS);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_set_pwd, LAYOUT_ACTIVITYSETPWD);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_settings, LAYOUT_ACTIVITYSETTINGS);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_staff, LAYOUT_ACTIVITYSTAFF);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_staff_detail, LAYOUT_ACTIVITYSTAFFDETAIL);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_task_center, LAYOUT_ACTIVITYTASKCENTER);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_test, LAYOUT_ACTIVITYTEST);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_train, LAYOUT_ACTIVITYTRAIN);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_train_detail, LAYOUT_ACTIVITYTRAINDETAIL);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_unsubscribe_account, LAYOUT_ACTIVITYUNSUBSCRIBEACCOUNT);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.activity_web_view, LAYOUT_ACTIVITYWEBVIEW);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.dialog_add_delvery, LAYOUT_DIALOGADDDELVERY);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.dialog_after_sale_reason, LAYOUT_DIALOGAFTERSALEREASON);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.dialog_cash_pay, LAYOUT_DIALOGCASHPAY);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.dialog_cash_type, LAYOUT_DIALOGCASHTYPE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.dialog_clip_board, LAYOUT_DIALOGCLIPBOARD);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.dialog_deliver, LAYOUT_DIALOGDELIVER);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.dialog_goods_spec, LAYOUT_DIALOGGOODSSPEC);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.dialog_hold_meeting, LAYOUT_DIALOGHOLDMEETING);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.dialog_join_meeting, LAYOUT_DIALOGJOINMEETING);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.dialog_message, LAYOUT_DIALOGMESSAGE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.dialog_order_coupon, LAYOUT_DIALOGORDERCOUPON);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.dialog_order_receipt, LAYOUT_DIALOGORDERRECEIPT);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.dialog_order_select_pay_type, LAYOUT_DIALOGORDERSELECTPAYTYPE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.dialog_pay, LAYOUT_DIALOGPAY);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.dialog_pintuan, LAYOUT_DIALOGPINTUAN);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.dialog_receipt_type, LAYOUT_DIALOGRECEIPTTYPE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.dialog_receipt_upload, LAYOUT_DIALOGRECEIPTUPLOAD);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.dialog_service_schedule, LAYOUT_DIALOGSERVICESCHEDULE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.dialog_store_code, LAYOUT_DIALOGSTORECODE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.dialog_sure_meeting, LAYOUT_DIALOGSUREMEETING);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.fragment_base, LAYOUT_FRAGMENTBASE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.fragment_cart, LAYOUT_FRAGMENTCART);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.fragment_coupon, LAYOUT_FRAGMENTCOUPON);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.fragment_decoration, LAYOUT_FRAGMENTDECORATION);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.fragment_find, LAYOUT_FRAGMENTFIND);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.fragment_goods, LAYOUT_FRAGMENTGOODS);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.fragment_goods_show, LAYOUT_FRAGMENTGOODSSHOW);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.fragment_meeting, LAYOUT_FRAGMENTMEETING);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.fragment_mine, LAYOUT_FRAGMENTMINE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.fragment_mine_service, LAYOUT_FRAGMENTMINESERVICE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.fragment_order, LAYOUT_FRAGMENTORDER);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.fragment_pintuan, LAYOUT_FRAGMENTPINTUAN);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.fragment_post, LAYOUT_FRAGMENTPOST);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.fragment_schedule, LAYOUT_FRAGMENTSCHEDULE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.fragment_service, LAYOUT_FRAGMENTSERVICE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.fragment_shop, LAYOUT_FRAGMENTSHOP);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.fragment_staff, LAYOUT_FRAGMENTSTAFF);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.fragment_task_center, LAYOUT_FRAGMENTTASKCENTER);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.fragment_train, LAYOUT_FRAGMENTTRAIN);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.fragment_zone, LAYOUT_FRAGMENTZONE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.test_tes, LAYOUT_TESTTES);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.view_bottom_cart, LAYOUT_VIEWBOTTOMCART);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.view_check_box, LAYOUT_VIEWCHECKBOX);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.view_clear_editext, LAYOUT_VIEWCLEAREDITEXT);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.view_comment_layout, LAYOUT_VIEWCOMMENTLAYOUT);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.view_fold_panel, LAYOUT_VIEWFOLDPANEL);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.view_goods_show, LAYOUT_VIEWGOODSSHOW);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.view_goods_show_panel, LAYOUT_VIEWGOODSSHOWPANEL);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.view_host_tab, LAYOUT_VIEWHOSTTAB);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.view_item_layout, LAYOUT_VIEWITEMLAYOUT);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.view_magic_image, LAYOUT_VIEWMAGICIMAGE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.view_mine_options, LAYOUT_VIEWMINEOPTIONS);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.view_mine_order, LAYOUT_VIEWMINEORDER);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.view_option, LAYOUT_VIEWOPTION);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.view_password_editext, LAYOUT_VIEWPASSWORDEDITEXT);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.view_post_header, LAYOUT_VIEWPOSTHEADER);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.view_search, LAYOUT_VIEWSEARCH);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.view_select_image, LAYOUT_VIEWSELECTIMAGE);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.view_seller_options, LAYOUT_VIEWSELLEROPTIONS);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.view_seller_result, LAYOUT_VIEWSELLERRESULT);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.view_settings_item, LAYOUT_VIEWSETTINGSITEM);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.view_tab_host, LAYOUT_VIEWTABHOST);
    INTERNAL_LAYOUT_ID_LOOKUP.put(com.asia.paint.R.layout.view_task_panel, LAYOUT_VIEWTASKPANEL);
  }

  private final ViewDataBinding internalGetViewDataBinding0(DataBindingComponent component,
      View view, int internalId, Object tag) {
    switch(internalId) {
      case  LAYOUT_ACTIVITYABOUTUS: {
        if ("layout/activity_about_us_0".equals(tag)) {
          return new ActivityAboutUsBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_about_us is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYACCOUNTINDEX: {
        if ("layout/activity_account_index_0".equals(tag)) {
          return new ActivityAccountIndexBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_account_index is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYADDCOMMENT: {
        if ("layout/activity_add_comment_0".equals(tag)) {
          return new ActivityAddCommentBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_add_comment is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYADDRESS: {
        if ("layout/activity_address_0".equals(tag)) {
          return new ActivityAddressBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_address is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYAFTERSALE: {
        if ("layout/activity_after_sale_0".equals(tag)) {
          return new ActivityAfterSaleBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_after_sale is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYAFTERSALEDETAIL: {
        if ("layout/activity_after_sale_detail_0".equals(tag)) {
          return new ActivityAfterSaleDetailBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_after_sale_detail is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYAPPLYAFTERSALE: {
        if ("layout/activity_apply_after_sale_0".equals(tag)) {
          return new ActivityApplyAfterSaleBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_apply_after_sale is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYAPPLYRESELL: {
        if ("layout/activity_apply_resell_0".equals(tag)) {
          return new ActivityApplyResellBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_apply_resell is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYAUTHREALNAME: {
        if ("layout/activity_auth_real_name_0".equals(tag)) {
          return new ActivityAuthRealNameBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_auth_real_name is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYBASETITLE: {
        if ("layout/activity_base_title_0".equals(tag)) {
          return new ActivityBaseTitleBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_base_title is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYBINDCASHACCOUNT: {
        if ("layout/activity_bind_cash_account_0".equals(tag)) {
          return new ActivityBindCashAccountBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_bind_cash_account is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYBINDPHONE: {
        if ("layout/activity_bind_phone_0".equals(tag)) {
          return new ActivityBindPhoneBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_bind_phone is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYCASH: {
        if ("layout/activity_cash_0".equals(tag)) {
          return new ActivityCashBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_cash is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYCASHRECORDDETAIL: {
        if ("layout/activity_cash_record_detail_0".equals(tag)) {
          return new ActivityCashRecordDetailBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_cash_record_detail is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYCOMMENT: {
        if ("layout/activity_comment_0".equals(tag)) {
          return new ActivityCommentBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_comment is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYCOUPON: {
        if ("layout/activity_coupon_0".equals(tag)) {
          return new ActivityCouponBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_coupon is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYCOUPONCENTER: {
        if ("layout/activity_coupon_center_0".equals(tag)) {
          return new ActivityCouponCenterBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_coupon_center is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYCUSTOMERHISTORYSERVICE: {
        if ("layout/activity_customer_history_service_0".equals(tag)) {
          return new ActivityCustomerHistoryServiceBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_customer_history_service is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYCUSTOMERSERVICE: {
        if ("layout/activity_customer_service_0".equals(tag)) {
          return new ActivityCustomerServiceBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_customer_service is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYDECORATIONDETAIL: {
        if ("layout/activity_decoration_detail_0".equals(tag)) {
          return new ActivityDecorationDetailBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_decoration_detail is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYDISTRIBUTIONTASKS: {
        if ("layout/activity_distribution_tasks_0".equals(tag)) {
          return new ActivityDistributionTasksBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_distribution_tasks is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYEDITADDRESS: {
        if ("layout/activity_edit_address_0".equals(tag)) {
          return new ActivityEditAddressBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_edit_address is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYEDITUSER: {
        if ("layout/activity_edit_user_0".equals(tag)) {
          return new ActivityEditUserBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_edit_user is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYFAVORITES: {
        if ("layout/activity_favorites_0".equals(tag)) {
          return new ActivityFavoritesBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_favorites is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYFEEDBACK: {
        if ("layout/activity_feedback_0".equals(tag)) {
          return new ActivityFeedbackBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_feedback is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYFORGETPASSWORD: {
        if ("layout/activity_forget_password_0".equals(tag)) {
          return new ActivityForgetPasswordBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_forget_password is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYGETPAYPWDCODE: {
        if ("layout/activity_get_pay_pwd_code_0".equals(tag)) {
          return new ActivityGetPayPwdCodeBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_get_pay_pwd_code is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYGOODSDETAIL: {
        if ("layout/activity_goods_detail_0".equals(tag)) {
          return new ActivityGoodsDetailBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_goods_detail is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYGROUPANDFLASH: {
        if ("layout/activity_group_and_flash_0".equals(tag)) {
          return new ActivityGroupAndFlashBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_group_and_flash is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYGROUPDETAIL: {
        if ("layout/activity_group_detail_0".equals(tag)) {
          return new ActivityGroupDetailBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_group_detail is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYHOLDMEETING: {
        if ("layout/activity_hold_meeting_0".equals(tag)) {
          return new ActivityHoldMeetingBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_hold_meeting is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYLOGIN: {
        if ("layout/activity_login_0".equals(tag)) {
          return new ActivityLoginBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_login is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYMAIN: {
        if ("layout/activity_main_0".equals(tag)) {
          return new ActivityMainBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_main is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYMEETING: {
        if ("layout/activity_meeting_0".equals(tag)) {
          return new ActivityMeetingBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_meeting is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYMEETINGDETAIL: {
        if ("layout/activity_meeting_detail_0".equals(tag)) {
          return new ActivityMeetingDetailBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_meeting_detail is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYMEETINGMEMBER: {
        if ("layout/activity_meeting_member_0".equals(tag)) {
          return new ActivityMeetingMemberBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_meeting_member is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYMESSAGE: {
        if ("layout/activity_message_0".equals(tag)) {
          return new ActivityMessageBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_message is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYMONEY: {
        if ("layout/activity_money_0".equals(tag)) {
          return new ActivityMoneyBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_money is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYMONEYDETAIL: {
        if ("layout/activity_money_detail_0".equals(tag)) {
          return new ActivityMoneyDetailBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_money_detail is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYMONTHLY: {
        if ("layout/activity_monthly_0".equals(tag)) {
          return new ActivityMonthlyBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_monthly is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYMONTHLYDETAIL: {
        if ("layout/activity_monthly_detail_0".equals(tag)) {
          return new ActivityMonthlyDetailBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_monthly_detail is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYMYPINTUAN: {
        if ("layout/activity_my_pintuan_0".equals(tag)) {
          return new ActivityMyPintuanBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_my_pintuan is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYNEWPASSWORD: {
        if ("layout/activity_new_password_0".equals(tag)) {
          return new ActivityNewPasswordBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_new_password is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYORDERCHECKOUT: {
        if ("layout/activity_order_checkout_0".equals(tag)) {
          return new ActivityOrderCheckoutBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_order_checkout is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYORDERDETAIL: {
        if ("layout/activity_order_detail_0".equals(tag)) {
          return new ActivityOrderDetailBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_order_detail is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYORDERMINE: {
        if ("layout/activity_order_mine_0".equals(tag)) {
          return new ActivityOrderMineBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_order_mine is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYPHOTO: {
        if ("layout/activity_photo_0".equals(tag)) {
          return new ActivityPhotoBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_photo is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYPLAYVIDEO: {
        if ("layout/activity_play_video_0".equals(tag)) {
          return new ActivityPlayVideoBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_play_video is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYPOSTDETAIL: {
        if ("layout/activity_post_detail_0".equals(tag)) {
          return new ActivityPostDetailBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_post_detail is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYPUBLISHPOST: {
        if ("layout/activity_publish_post_0".equals(tag)) {
          return new ActivityPublishPostBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_publish_post is invalid. Received: " + tag);
      }
    }
    return null;
  }

  private final ViewDataBinding internalGetViewDataBinding1(DataBindingComponent component,
      View view, int internalId, Object tag) {
    switch(internalId) {
      case  LAYOUT_ACTIVITYRECEIPT: {
        if ("layout/activity_receipt_0".equals(tag)) {
          return new ActivityReceiptBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_receipt is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYRECHARGE: {
        if ("layout/activity_recharge_0".equals(tag)) {
          return new ActivityRechargeBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_recharge is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYRECOMMENDCODE: {
        if ("layout/activity_recommend_code_0".equals(tag)) {
          return new ActivityRecommendCodeBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_recommend_code is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYRESETPASSWORD: {
        if ("layout/activity_reset_password_0".equals(tag)) {
          return new ActivityResetPasswordBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_reset_password is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYSCORE: {
        if ("layout/activity_score_0".equals(tag)) {
          return new ActivityScoreBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_score is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYSCOREDETAIL: {
        if ("layout/activity_score_detail_0".equals(tag)) {
          return new ActivityScoreDetailBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_score_detail is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYSCORERECORD: {
        if ("layout/activity_score_record_0".equals(tag)) {
          return new ActivityScoreRecordBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_score_record is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYSELECTAFTERSALETYPE: {
        if ("layout/activity_select_after_sale_type_0".equals(tag)) {
          return new ActivitySelectAfterSaleTypeBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_select_after_sale_type is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYSELLERGOALS: {
        if ("layout/activity_seller_goals_0".equals(tag)) {
          return new ActivitySellerGoalsBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_seller_goals is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYSETPWD: {
        if ("layout/activity_set_pwd_0".equals(tag)) {
          return new ActivitySetPwdBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_set_pwd is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYSETTINGS: {
        if ("layout/activity_settings_0".equals(tag)) {
          return new ActivitySettingsBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_settings is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYSTAFF: {
        if ("layout/activity_staff_0".equals(tag)) {
          return new ActivityStaffBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_staff is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYSTAFFDETAIL: {
        if ("layout/activity_staff_detail_0".equals(tag)) {
          return new ActivityStaffDetailBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_staff_detail is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYTASKCENTER: {
        if ("layout/activity_task_center_0".equals(tag)) {
          return new ActivityTaskCenterBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_task_center is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYTEST: {
        if ("layout/activity_test_0".equals(tag)) {
          return new ActivityTestBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_test is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYTRAIN: {
        if ("layout/activity_train_0".equals(tag)) {
          return new ActivityTrainBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_train is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYTRAINDETAIL: {
        if ("layout/activity_train_detail_0".equals(tag)) {
          return new ActivityTrainDetailBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_train_detail is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYUNSUBSCRIBEACCOUNT: {
        if ("layout/activity_unsubscribe_account_0".equals(tag)) {
          return new ActivityUnsubscribeAccountBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_unsubscribe_account is invalid. Received: " + tag);
      }
      case  LAYOUT_ACTIVITYWEBVIEW: {
        if ("layout/activity_web_view_0".equals(tag)) {
          return new ActivityWebViewBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for activity_web_view is invalid. Received: " + tag);
      }
      case  LAYOUT_DIALOGADDDELVERY: {
        if ("layout/dialog_add_delvery_0".equals(tag)) {
          return new DialogAddDelveryBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for dialog_add_delvery is invalid. Received: " + tag);
      }
      case  LAYOUT_DIALOGAFTERSALEREASON: {
        if ("layout/dialog_after_sale_reason_0".equals(tag)) {
          return new DialogAfterSaleReasonBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for dialog_after_sale_reason is invalid. Received: " + tag);
      }
      case  LAYOUT_DIALOGCASHPAY: {
        if ("layout/dialog_cash_pay_0".equals(tag)) {
          return new DialogCashPayBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for dialog_cash_pay is invalid. Received: " + tag);
      }
      case  LAYOUT_DIALOGCASHTYPE: {
        if ("layout/dialog_cash_type_0".equals(tag)) {
          return new DialogCashTypeBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for dialog_cash_type is invalid. Received: " + tag);
      }
      case  LAYOUT_DIALOGCLIPBOARD: {
        if ("layout/dialog_clip_board_0".equals(tag)) {
          return new DialogClipBoardBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for dialog_clip_board is invalid. Received: " + tag);
      }
      case  LAYOUT_DIALOGDELIVER: {
        if ("layout/dialog_deliver_0".equals(tag)) {
          return new DialogDeliverBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for dialog_deliver is invalid. Received: " + tag);
      }
      case  LAYOUT_DIALOGGOODSSPEC: {
        if ("layout/dialog_goods_spec_0".equals(tag)) {
          return new DialogGoodsSpecBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for dialog_goods_spec is invalid. Received: " + tag);
      }
      case  LAYOUT_DIALOGHOLDMEETING: {
        if ("layout/dialog_hold_meeting_0".equals(tag)) {
          return new DialogHoldMeetingBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for dialog_hold_meeting is invalid. Received: " + tag);
      }
      case  LAYOUT_DIALOGJOINMEETING: {
        if ("layout/dialog_join_meeting_0".equals(tag)) {
          return new DialogJoinMeetingBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for dialog_join_meeting is invalid. Received: " + tag);
      }
      case  LAYOUT_DIALOGMESSAGE: {
        if ("layout/dialog_message_0".equals(tag)) {
          return new DialogMessageBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for dialog_message is invalid. Received: " + tag);
      }
      case  LAYOUT_DIALOGORDERCOUPON: {
        if ("layout/dialog_order_coupon_0".equals(tag)) {
          return new DialogOrderCouponBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for dialog_order_coupon is invalid. Received: " + tag);
      }
      case  LAYOUT_DIALOGORDERRECEIPT: {
        if ("layout/dialog_order_receipt_0".equals(tag)) {
          return new DialogOrderReceiptBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for dialog_order_receipt is invalid. Received: " + tag);
      }
      case  LAYOUT_DIALOGORDERSELECTPAYTYPE: {
        if ("layout/dialog_order_select_pay_type_0".equals(tag)) {
          return new DialogOrderSelectPayTypeBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for dialog_order_select_pay_type is invalid. Received: " + tag);
      }
      case  LAYOUT_DIALOGPAY: {
        if ("layout/dialog_pay_0".equals(tag)) {
          return new DialogPayBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for dialog_pay is invalid. Received: " + tag);
      }
      case  LAYOUT_DIALOGPINTUAN: {
        if ("layout/dialog_pintuan_0".equals(tag)) {
          return new DialogPintuanBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for dialog_pintuan is invalid. Received: " + tag);
      }
      case  LAYOUT_DIALOGRECEIPTTYPE: {
        if ("layout/dialog_receipt_type_0".equals(tag)) {
          return new DialogReceiptTypeBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for dialog_receipt_type is invalid. Received: " + tag);
      }
      case  LAYOUT_DIALOGRECEIPTUPLOAD: {
        if ("layout/dialog_receipt_upload_0".equals(tag)) {
          return new DialogReceiptUploadBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for dialog_receipt_upload is invalid. Received: " + tag);
      }
      case  LAYOUT_DIALOGSERVICESCHEDULE: {
        if ("layout/dialog_service_schedule_0".equals(tag)) {
          return new DialogServiceScheduleBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for dialog_service_schedule is invalid. Received: " + tag);
      }
      case  LAYOUT_DIALOGSTORECODE: {
        if ("layout/dialog_store_code_0".equals(tag)) {
          return new DialogStoreCodeBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for dialog_store_code is invalid. Received: " + tag);
      }
      case  LAYOUT_DIALOGSUREMEETING: {
        if ("layout/dialog_sure_meeting_0".equals(tag)) {
          return new DialogSureMeetingBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for dialog_sure_meeting is invalid. Received: " + tag);
      }
      case  LAYOUT_FRAGMENTBASE: {
        if ("layout/fragment_base_0".equals(tag)) {
          return new FragmentBaseBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for fragment_base is invalid. Received: " + tag);
      }
      case  LAYOUT_FRAGMENTCART: {
        if ("layout/fragment_cart_0".equals(tag)) {
          return new FragmentCartBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for fragment_cart is invalid. Received: " + tag);
      }
      case  LAYOUT_FRAGMENTCOUPON: {
        if ("layout/fragment_coupon_0".equals(tag)) {
          return new FragmentCouponBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for fragment_coupon is invalid. Received: " + tag);
      }
      case  LAYOUT_FRAGMENTDECORATION: {
        if ("layout/fragment_decoration_0".equals(tag)) {
          return new FragmentDecorationBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for fragment_decoration is invalid. Received: " + tag);
      }
      case  LAYOUT_FRAGMENTFIND: {
        if ("layout/fragment_find_0".equals(tag)) {
          return new FragmentFindBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for fragment_find is invalid. Received: " + tag);
      }
      case  LAYOUT_FRAGMENTGOODS: {
        if ("layout/fragment_goods_0".equals(tag)) {
          return new FragmentGoodsBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for fragment_goods is invalid. Received: " + tag);
      }
      case  LAYOUT_FRAGMENTGOODSSHOW: {
        if ("layout/fragment_goods_show_0".equals(tag)) {
          return new FragmentGoodsShowBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for fragment_goods_show is invalid. Received: " + tag);
      }
      case  LAYOUT_FRAGMENTMEETING: {
        if ("layout/fragment_meeting_0".equals(tag)) {
          return new FragmentMeetingBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for fragment_meeting is invalid. Received: " + tag);
      }
      case  LAYOUT_FRAGMENTMINE: {
        if ("layout/fragment_mine_0".equals(tag)) {
          return new FragmentMineBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for fragment_mine is invalid. Received: " + tag);
      }
      case  LAYOUT_FRAGMENTMINESERVICE: {
        if ("layout/fragment_mine_service_0".equals(tag)) {
          return new FragmentMineServiceBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for fragment_mine_service is invalid. Received: " + tag);
      }
      case  LAYOUT_FRAGMENTORDER: {
        if ("layout/fragment_order_0".equals(tag)) {
          return new FragmentOrderBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for fragment_order is invalid. Received: " + tag);
      }
    }
    return null;
  }

  private final ViewDataBinding internalGetViewDataBinding2(DataBindingComponent component,
      View view, int internalId, Object tag) {
    switch(internalId) {
      case  LAYOUT_FRAGMENTPINTUAN: {
        if ("layout/fragment_pintuan_0".equals(tag)) {
          return new FragmentPintuanBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for fragment_pintuan is invalid. Received: " + tag);
      }
      case  LAYOUT_FRAGMENTPOST: {
        if ("layout/fragment_post_0".equals(tag)) {
          return new FragmentPostBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for fragment_post is invalid. Received: " + tag);
      }
      case  LAYOUT_FRAGMENTSCHEDULE: {
        if ("layout/fragment_schedule_0".equals(tag)) {
          return new FragmentScheduleBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for fragment_schedule is invalid. Received: " + tag);
      }
      case  LAYOUT_FRAGMENTSERVICE: {
        if ("layout/fragment_service_0".equals(tag)) {
          return new FragmentServiceBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for fragment_service is invalid. Received: " + tag);
      }
      case  LAYOUT_FRAGMENTSHOP: {
        if ("layout/fragment_shop_0".equals(tag)) {
          return new FragmentShopBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for fragment_shop is invalid. Received: " + tag);
      }
      case  LAYOUT_FRAGMENTSTAFF: {
        if ("layout/fragment_staff_0".equals(tag)) {
          return new FragmentStaffBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for fragment_staff is invalid. Received: " + tag);
      }
      case  LAYOUT_FRAGMENTTASKCENTER: {
        if ("layout/fragment_task_center_0".equals(tag)) {
          return new FragmentTaskCenterBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for fragment_task_center is invalid. Received: " + tag);
      }
      case  LAYOUT_FRAGMENTTRAIN: {
        if ("layout/fragment_train_0".equals(tag)) {
          return new FragmentTrainBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for fragment_train is invalid. Received: " + tag);
      }
      case  LAYOUT_FRAGMENTZONE: {
        if ("layout/fragment_zone_0".equals(tag)) {
          return new FragmentZoneBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for fragment_zone is invalid. Received: " + tag);
      }
      case  LAYOUT_TESTTES: {
        if ("layout/test_tes_0".equals(tag)) {
          return new TestTesBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for test_tes is invalid. Received: " + tag);
      }
      case  LAYOUT_VIEWBOTTOMCART: {
        if ("layout/view_bottom_cart_0".equals(tag)) {
          return new ViewBottomCartBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for view_bottom_cart is invalid. Received: " + tag);
      }
      case  LAYOUT_VIEWCHECKBOX: {
        if ("layout/view_check_box_0".equals(tag)) {
          return new ViewCheckBoxBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for view_check_box is invalid. Received: " + tag);
      }
      case  LAYOUT_VIEWCLEAREDITEXT: {
        if ("layout/view_clear_editext_0".equals(tag)) {
          return new ViewClearEditextBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for view_clear_editext is invalid. Received: " + tag);
      }
      case  LAYOUT_VIEWCOMMENTLAYOUT: {
        if ("layout/view_comment_layout_0".equals(tag)) {
          return new ViewCommentLayoutBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for view_comment_layout is invalid. Received: " + tag);
      }
      case  LAYOUT_VIEWFOLDPANEL: {
        if ("layout/view_fold_panel_0".equals(tag)) {
          return new ViewFoldPanelBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for view_fold_panel is invalid. Received: " + tag);
      }
      case  LAYOUT_VIEWGOODSSHOW: {
        if ("layout/view_goods_show_0".equals(tag)) {
          return new ViewGoodsShowBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for view_goods_show is invalid. Received: " + tag);
      }
      case  LAYOUT_VIEWGOODSSHOWPANEL: {
        if ("layout/view_goods_show_panel_0".equals(tag)) {
          return new ViewGoodsShowPanelBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for view_goods_show_panel is invalid. Received: " + tag);
      }
      case  LAYOUT_VIEWHOSTTAB: {
        if ("layout/view_host_tab_0".equals(tag)) {
          return new ViewHostTabBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for view_host_tab is invalid. Received: " + tag);
      }
      case  LAYOUT_VIEWITEMLAYOUT: {
        if ("layout/view_item_layout_0".equals(tag)) {
          return new ViewItemLayoutBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for view_item_layout is invalid. Received: " + tag);
      }
      case  LAYOUT_VIEWMAGICIMAGE: {
        if ("layout/view_magic_image_0".equals(tag)) {
          return new ViewMagicImageBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for view_magic_image is invalid. Received: " + tag);
      }
      case  LAYOUT_VIEWMINEOPTIONS: {
        if ("layout/view_mine_options_0".equals(tag)) {
          return new ViewMineOptionsBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for view_mine_options is invalid. Received: " + tag);
      }
      case  LAYOUT_VIEWMINEORDER: {
        if ("layout/view_mine_order_0".equals(tag)) {
          return new ViewMineOrderBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for view_mine_order is invalid. Received: " + tag);
      }
      case  LAYOUT_VIEWOPTION: {
        if ("layout/view_option_0".equals(tag)) {
          return new ViewOptionBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for view_option is invalid. Received: " + tag);
      }
      case  LAYOUT_VIEWPASSWORDEDITEXT: {
        if ("layout/view_password_editext_0".equals(tag)) {
          return new ViewPasswordEditextBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for view_password_editext is invalid. Received: " + tag);
      }
      case  LAYOUT_VIEWPOSTHEADER: {
        if ("layout/view_post_header_0".equals(tag)) {
          return new ViewPostHeaderBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for view_post_header is invalid. Received: " + tag);
      }
      case  LAYOUT_VIEWSEARCH: {
        if ("layout/view_search_0".equals(tag)) {
          return new ViewSearchBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for view_search is invalid. Received: " + tag);
      }
      case  LAYOUT_VIEWSELECTIMAGE: {
        if ("layout/view_select_image_0".equals(tag)) {
          return new ViewSelectImageBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for view_select_image is invalid. Received: " + tag);
      }
      case  LAYOUT_VIEWSELLEROPTIONS: {
        if ("layout/view_seller_options_0".equals(tag)) {
          return new ViewSellerOptionsBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for view_seller_options is invalid. Received: " + tag);
      }
      case  LAYOUT_VIEWSELLERRESULT: {
        if ("layout/view_seller_result_0".equals(tag)) {
          return new ViewSellerResultBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for view_seller_result is invalid. Received: " + tag);
      }
      case  LAYOUT_VIEWSETTINGSITEM: {
        if ("layout/view_settings_item_0".equals(tag)) {
          return new ViewSettingsItemBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for view_settings_item is invalid. Received: " + tag);
      }
      case  LAYOUT_VIEWTABHOST: {
        if ("layout/view_tab_host_0".equals(tag)) {
          return new ViewTabHostBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for view_tab_host is invalid. Received: " + tag);
      }
      case  LAYOUT_VIEWTASKPANEL: {
        if ("layout/view_task_panel_0".equals(tag)) {
          return new ViewTaskPanelBindingImpl(component, view);
        }
        throw new IllegalArgumentException("The tag for view_task_panel is invalid. Received: " + tag);
      }
    }
    return null;
  }

  @Override
  public ViewDataBinding getDataBinder(DataBindingComponent component, View view, int layoutId) {
    int localizedLayoutId = INTERNAL_LAYOUT_ID_LOOKUP.get(layoutId);
    if(localizedLayoutId > 0) {
      final Object tag = view.getTag();
      if(tag == null) {
        throw new RuntimeException("view must have a tag");
      }
      // find which method will have it. -1 is necessary becausefirst id starts with 1;
      int methodIndex = (localizedLayoutId - 1) / 50;
      switch(methodIndex) {
        case 0: {
          return internalGetViewDataBinding0(component, view, localizedLayoutId, tag);
        }
        case 1: {
          return internalGetViewDataBinding1(component, view, localizedLayoutId, tag);
        }
        case 2: {
          return internalGetViewDataBinding2(component, view, localizedLayoutId, tag);
        }
      }
    }
    return null;
  }

  @Override
  public ViewDataBinding getDataBinder(DataBindingComponent component, View[] views, int layoutId) {
    if(views == null || views.length == 0) {
      return null;
    }
    int localizedLayoutId = INTERNAL_LAYOUT_ID_LOOKUP.get(layoutId);
    if(localizedLayoutId > 0) {
      final Object tag = views[0].getTag();
      if(tag == null) {
        throw new RuntimeException("view must have a tag");
      }
      switch(localizedLayoutId) {
      }
    }
    return null;
  }

  @Override
  public int getLayoutId(String tag) {
    if (tag == null) {
      return 0;
    }
    Integer tmpVal = InnerLayoutIdLookup.sKeys.get(tag);
    return tmpVal == null ? 0 : tmpVal;
  }

  @Override
  public String convertBrIdToString(int localId) {
    String tmpVal = InnerBrLookup.sKeys.get(localId);
    return tmpVal;
  }

  @Override
  public List<DataBinderMapper> collectDependencies() {
    ArrayList<DataBinderMapper> result = new ArrayList<DataBinderMapper>(5);
    result.add(new androidx.databinding.library.baseAdapters.DataBinderMapperImpl());
    result.add(new com.asia.paint.banner.DataBinderMapperImpl());
    result.add(new com.asia.paint.network.DataBinderMapperImpl());
    result.add(new com.asia.paint.ui.DataBinderMapperImpl());
    result.add(new com.asia.paint.utils.DataBinderMapperImpl());
    return result;
  }

  private static class InnerBrLookup {
    static final SparseArray<String> sKeys = new SparseArray<String>(2);

    static {
      sKeys.put(0, "_all");
    }
  }

  private static class InnerLayoutIdLookup {
    static final HashMap<String, Integer> sKeys = new HashMap<String, Integer>(132);

    static {
      sKeys.put("layout/activity_about_us_0", com.asia.paint.R.layout.activity_about_us);
      sKeys.put("layout/activity_account_index_0", com.asia.paint.R.layout.activity_account_index);
      sKeys.put("layout/activity_add_comment_0", com.asia.paint.R.layout.activity_add_comment);
      sKeys.put("layout/activity_address_0", com.asia.paint.R.layout.activity_address);
      sKeys.put("layout/activity_after_sale_0", com.asia.paint.R.layout.activity_after_sale);
      sKeys.put("layout/activity_after_sale_detail_0", com.asia.paint.R.layout.activity_after_sale_detail);
      sKeys.put("layout/activity_apply_after_sale_0", com.asia.paint.R.layout.activity_apply_after_sale);
      sKeys.put("layout/activity_apply_resell_0", com.asia.paint.R.layout.activity_apply_resell);
      sKeys.put("layout/activity_auth_real_name_0", com.asia.paint.R.layout.activity_auth_real_name);
      sKeys.put("layout/activity_base_title_0", com.asia.paint.R.layout.activity_base_title);
      sKeys.put("layout/activity_bind_cash_account_0", com.asia.paint.R.layout.activity_bind_cash_account);
      sKeys.put("layout/activity_bind_phone_0", com.asia.paint.R.layout.activity_bind_phone);
      sKeys.put("layout/activity_cash_0", com.asia.paint.R.layout.activity_cash);
      sKeys.put("layout/activity_cash_record_detail_0", com.asia.paint.R.layout.activity_cash_record_detail);
      sKeys.put("layout/activity_comment_0", com.asia.paint.R.layout.activity_comment);
      sKeys.put("layout/activity_coupon_0", com.asia.paint.R.layout.activity_coupon);
      sKeys.put("layout/activity_coupon_center_0", com.asia.paint.R.layout.activity_coupon_center);
      sKeys.put("layout/activity_customer_history_service_0", com.asia.paint.R.layout.activity_customer_history_service);
      sKeys.put("layout/activity_customer_service_0", com.asia.paint.R.layout.activity_customer_service);
      sKeys.put("layout/activity_decoration_detail_0", com.asia.paint.R.layout.activity_decoration_detail);
      sKeys.put("layout/activity_distribution_tasks_0", com.asia.paint.R.layout.activity_distribution_tasks);
      sKeys.put("layout/activity_edit_address_0", com.asia.paint.R.layout.activity_edit_address);
      sKeys.put("layout/activity_edit_user_0", com.asia.paint.R.layout.activity_edit_user);
      sKeys.put("layout/activity_favorites_0", com.asia.paint.R.layout.activity_favorites);
      sKeys.put("layout/activity_feedback_0", com.asia.paint.R.layout.activity_feedback);
      sKeys.put("layout/activity_forget_password_0", com.asia.paint.R.layout.activity_forget_password);
      sKeys.put("layout/activity_get_pay_pwd_code_0", com.asia.paint.R.layout.activity_get_pay_pwd_code);
      sKeys.put("layout/activity_goods_detail_0", com.asia.paint.R.layout.activity_goods_detail);
      sKeys.put("layout/activity_group_and_flash_0", com.asia.paint.R.layout.activity_group_and_flash);
      sKeys.put("layout/activity_group_detail_0", com.asia.paint.R.layout.activity_group_detail);
      sKeys.put("layout/activity_hold_meeting_0", com.asia.paint.R.layout.activity_hold_meeting);
      sKeys.put("layout/activity_login_0", com.asia.paint.R.layout.activity_login);
      sKeys.put("layout/activity_main_0", com.asia.paint.R.layout.activity_main);
      sKeys.put("layout/activity_meeting_0", com.asia.paint.R.layout.activity_meeting);
      sKeys.put("layout/activity_meeting_detail_0", com.asia.paint.R.layout.activity_meeting_detail);
      sKeys.put("layout/activity_meeting_member_0", com.asia.paint.R.layout.activity_meeting_member);
      sKeys.put("layout/activity_message_0", com.asia.paint.R.layout.activity_message);
      sKeys.put("layout/activity_money_0", com.asia.paint.R.layout.activity_money);
      sKeys.put("layout/activity_money_detail_0", com.asia.paint.R.layout.activity_money_detail);
      sKeys.put("layout/activity_monthly_0", com.asia.paint.R.layout.activity_monthly);
      sKeys.put("layout/activity_monthly_detail_0", com.asia.paint.R.layout.activity_monthly_detail);
      sKeys.put("layout/activity_my_pintuan_0", com.asia.paint.R.layout.activity_my_pintuan);
      sKeys.put("layout/activity_new_password_0", com.asia.paint.R.layout.activity_new_password);
      sKeys.put("layout/activity_order_checkout_0", com.asia.paint.R.layout.activity_order_checkout);
      sKeys.put("layout/activity_order_detail_0", com.asia.paint.R.layout.activity_order_detail);
      sKeys.put("layout/activity_order_mine_0", com.asia.paint.R.layout.activity_order_mine);
      sKeys.put("layout/activity_photo_0", com.asia.paint.R.layout.activity_photo);
      sKeys.put("layout/activity_play_video_0", com.asia.paint.R.layout.activity_play_video);
      sKeys.put("layout/activity_post_detail_0", com.asia.paint.R.layout.activity_post_detail);
      sKeys.put("layout/activity_publish_post_0", com.asia.paint.R.layout.activity_publish_post);
      sKeys.put("layout/activity_receipt_0", com.asia.paint.R.layout.activity_receipt);
      sKeys.put("layout/activity_recharge_0", com.asia.paint.R.layout.activity_recharge);
      sKeys.put("layout/activity_recommend_code_0", com.asia.paint.R.layout.activity_recommend_code);
      sKeys.put("layout/activity_reset_password_0", com.asia.paint.R.layout.activity_reset_password);
      sKeys.put("layout/activity_score_0", com.asia.paint.R.layout.activity_score);
      sKeys.put("layout/activity_score_detail_0", com.asia.paint.R.layout.activity_score_detail);
      sKeys.put("layout/activity_score_record_0", com.asia.paint.R.layout.activity_score_record);
      sKeys.put("layout/activity_select_after_sale_type_0", com.asia.paint.R.layout.activity_select_after_sale_type);
      sKeys.put("layout/activity_seller_goals_0", com.asia.paint.R.layout.activity_seller_goals);
      sKeys.put("layout/activity_set_pwd_0", com.asia.paint.R.layout.activity_set_pwd);
      sKeys.put("layout/activity_settings_0", com.asia.paint.R.layout.activity_settings);
      sKeys.put("layout/activity_staff_0", com.asia.paint.R.layout.activity_staff);
      sKeys.put("layout/activity_staff_detail_0", com.asia.paint.R.layout.activity_staff_detail);
      sKeys.put("layout/activity_task_center_0", com.asia.paint.R.layout.activity_task_center);
      sKeys.put("layout/activity_test_0", com.asia.paint.R.layout.activity_test);
      sKeys.put("layout/activity_train_0", com.asia.paint.R.layout.activity_train);
      sKeys.put("layout/activity_train_detail_0", com.asia.paint.R.layout.activity_train_detail);
      sKeys.put("layout/activity_unsubscribe_account_0", com.asia.paint.R.layout.activity_unsubscribe_account);
      sKeys.put("layout/activity_web_view_0", com.asia.paint.R.layout.activity_web_view);
      sKeys.put("layout/dialog_add_delvery_0", com.asia.paint.R.layout.dialog_add_delvery);
      sKeys.put("layout/dialog_after_sale_reason_0", com.asia.paint.R.layout.dialog_after_sale_reason);
      sKeys.put("layout/dialog_cash_pay_0", com.asia.paint.R.layout.dialog_cash_pay);
      sKeys.put("layout/dialog_cash_type_0", com.asia.paint.R.layout.dialog_cash_type);
      sKeys.put("layout/dialog_clip_board_0", com.asia.paint.R.layout.dialog_clip_board);
      sKeys.put("layout/dialog_deliver_0", com.asia.paint.R.layout.dialog_deliver);
      sKeys.put("layout/dialog_goods_spec_0", com.asia.paint.R.layout.dialog_goods_spec);
      sKeys.put("layout/dialog_hold_meeting_0", com.asia.paint.R.layout.dialog_hold_meeting);
      sKeys.put("layout/dialog_join_meeting_0", com.asia.paint.R.layout.dialog_join_meeting);
      sKeys.put("layout/dialog_message_0", com.asia.paint.R.layout.dialog_message);
      sKeys.put("layout/dialog_order_coupon_0", com.asia.paint.R.layout.dialog_order_coupon);
      sKeys.put("layout/dialog_order_receipt_0", com.asia.paint.R.layout.dialog_order_receipt);
      sKeys.put("layout/dialog_order_select_pay_type_0", com.asia.paint.R.layout.dialog_order_select_pay_type);
      sKeys.put("layout/dialog_pay_0", com.asia.paint.R.layout.dialog_pay);
      sKeys.put("layout/dialog_pintuan_0", com.asia.paint.R.layout.dialog_pintuan);
      sKeys.put("layout/dialog_receipt_type_0", com.asia.paint.R.layout.dialog_receipt_type);
      sKeys.put("layout/dialog_receipt_upload_0", com.asia.paint.R.layout.dialog_receipt_upload);
      sKeys.put("layout/dialog_service_schedule_0", com.asia.paint.R.layout.dialog_service_schedule);
      sKeys.put("layout/dialog_store_code_0", com.asia.paint.R.layout.dialog_store_code);
      sKeys.put("layout/dialog_sure_meeting_0", com.asia.paint.R.layout.dialog_sure_meeting);
      sKeys.put("layout/fragment_base_0", com.asia.paint.R.layout.fragment_base);
      sKeys.put("layout/fragment_cart_0", com.asia.paint.R.layout.fragment_cart);
      sKeys.put("layout/fragment_coupon_0", com.asia.paint.R.layout.fragment_coupon);
      sKeys.put("layout/fragment_decoration_0", com.asia.paint.R.layout.fragment_decoration);
      sKeys.put("layout/fragment_find_0", com.asia.paint.R.layout.fragment_find);
      sKeys.put("layout/fragment_goods_0", com.asia.paint.R.layout.fragment_goods);
      sKeys.put("layout/fragment_goods_show_0", com.asia.paint.R.layout.fragment_goods_show);
      sKeys.put("layout/fragment_meeting_0", com.asia.paint.R.layout.fragment_meeting);
      sKeys.put("layout/fragment_mine_0", com.asia.paint.R.layout.fragment_mine);
      sKeys.put("layout/fragment_mine_service_0", com.asia.paint.R.layout.fragment_mine_service);
      sKeys.put("layout/fragment_order_0", com.asia.paint.R.layout.fragment_order);
      sKeys.put("layout/fragment_pintuan_0", com.asia.paint.R.layout.fragment_pintuan);
      sKeys.put("layout/fragment_post_0", com.asia.paint.R.layout.fragment_post);
      sKeys.put("layout/fragment_schedule_0", com.asia.paint.R.layout.fragment_schedule);
      sKeys.put("layout/fragment_service_0", com.asia.paint.R.layout.fragment_service);
      sKeys.put("layout/fragment_shop_0", com.asia.paint.R.layout.fragment_shop);
      sKeys.put("layout/fragment_staff_0", com.asia.paint.R.layout.fragment_staff);
      sKeys.put("layout/fragment_task_center_0", com.asia.paint.R.layout.fragment_task_center);
      sKeys.put("layout/fragment_train_0", com.asia.paint.R.layout.fragment_train);
      sKeys.put("layout/fragment_zone_0", com.asia.paint.R.layout.fragment_zone);
      sKeys.put("layout/test_tes_0", com.asia.paint.R.layout.test_tes);
      sKeys.put("layout/view_bottom_cart_0", com.asia.paint.R.layout.view_bottom_cart);
      sKeys.put("layout/view_check_box_0", com.asia.paint.R.layout.view_check_box);
      sKeys.put("layout/view_clear_editext_0", com.asia.paint.R.layout.view_clear_editext);
      sKeys.put("layout/view_comment_layout_0", com.asia.paint.R.layout.view_comment_layout);
      sKeys.put("layout/view_fold_panel_0", com.asia.paint.R.layout.view_fold_panel);
      sKeys.put("layout/view_goods_show_0", com.asia.paint.R.layout.view_goods_show);
      sKeys.put("layout/view_goods_show_panel_0", com.asia.paint.R.layout.view_goods_show_panel);
      sKeys.put("layout/view_host_tab_0", com.asia.paint.R.layout.view_host_tab);
      sKeys.put("layout/view_item_layout_0", com.asia.paint.R.layout.view_item_layout);
      sKeys.put("layout/view_magic_image_0", com.asia.paint.R.layout.view_magic_image);
      sKeys.put("layout/view_mine_options_0", com.asia.paint.R.layout.view_mine_options);
      sKeys.put("layout/view_mine_order_0", com.asia.paint.R.layout.view_mine_order);
      sKeys.put("layout/view_option_0", com.asia.paint.R.layout.view_option);
      sKeys.put("layout/view_password_editext_0", com.asia.paint.R.layout.view_password_editext);
      sKeys.put("layout/view_post_header_0", com.asia.paint.R.layout.view_post_header);
      sKeys.put("layout/view_search_0", com.asia.paint.R.layout.view_search);
      sKeys.put("layout/view_select_image_0", com.asia.paint.R.layout.view_select_image);
      sKeys.put("layout/view_seller_options_0", com.asia.paint.R.layout.view_seller_options);
      sKeys.put("layout/view_seller_result_0", com.asia.paint.R.layout.view_seller_result);
      sKeys.put("layout/view_settings_item_0", com.asia.paint.R.layout.view_settings_item);
      sKeys.put("layout/view_tab_host_0", com.asia.paint.R.layout.view_tab_host);
      sKeys.put("layout/view_task_panel_0", com.asia.paint.R.layout.view_task_panel);
    }
  }
}
